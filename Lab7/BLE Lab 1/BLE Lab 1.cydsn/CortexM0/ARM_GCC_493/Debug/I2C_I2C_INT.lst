ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"I2C_I2C_INT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.I2C_I2C_ISR,"ax",%progbits
  18              		.align	2
  19              		.global	I2C_I2C_ISR
  20              		.code	16
  21              		.thumb_func
  22              		.type	I2C_I2C_ISR, %function
  23              	I2C_I2C_ISR:
  24              	.LFB2:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\I2C_I2C_INT.c"
   1:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * File Name: I2C_I2C_INT.c
   3:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Version 3.0
   4:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
   5:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Description:
   6:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *  the SCB Component in I2C mode.
   8:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
   9:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Note:
  10:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  11:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Copyright 2013-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  18:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #include "I2C_PVT.h"
  19:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #include "I2C_I2C_PVT.h"
  20:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  21:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  22:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  23:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** /*******************************************************************************
  24:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Function Name: I2C_I2C_ISR
  25:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** ********************************************************************************
  26:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  27:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Summary:
  28:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *  Handles the Interrupt Service Routine for the SCB I2C mode.
  29:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  30:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Parameters:
  31:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *  None
  32:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 2


  33:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** * Return:
  34:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *  None
  35:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  36:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** *******************************************************************************/
  37:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** CY_ISR(I2C_I2C_ISR)
  38:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** {
  26              		.loc 1 38 0
  27              		.cfi_startproc
  28 0000 10B5     		push	{r4, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 4, -8
  31              		.cfi_offset 14, -4
  32              	.LVL0:
  39:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     uint32 diffCount;
  40:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     uint32 endTransfer;
  41:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  42:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #ifdef I2C_I2C_ISR_ENTRY_CALLBACK
  43:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     I2C_I2C_ISR_EntryCallback();
  44:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #endif /* I2C_I2C_ISR_ENTRY_CALLBACK */
  45:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     
  46:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
  47:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     uint32 response;
  48:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  49:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     response = I2C_I2C_ACK_ADDR;
  50:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #endif /* (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
  51:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  52:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     endTransfer = 0u; /* Continue active transfer */
  53:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  54:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* Calls customer routine if registered */
  55:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(NULL != I2C_customIntrHandler)
  33              		.loc 1 55 0
  34 0002 CE4B     		ldr	r3, .L37
  35 0004 1B68     		ldr	r3, [r3]
  36 0006 002B     		cmp	r3, #0
  37 0008 00D0     		beq	.L2
  56:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
  57:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_customIntrHandler();
  38              		.loc 1 57 0
  39 000a 9847     		blx	r3
  40              	.LVL1:
  41              	.L2:
  58:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
  59:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  60:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(I2C_CHECK_INTR_I2C_EC_MASKED(I2C_INTR_I2C_EC_WAKE_UP))
  42              		.loc 1 60 0
  43 000c CC4B     		ldr	r3, .L37+4
  44 000e 1B68     		ldr	r3, [r3]
  45 0010 DB07     		lsl	r3, r3, #31
  46 0012 02D5     		bpl	.L3
  61:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
  62:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         /* Mask-off after wakeup */
  63:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_SetI2CExtClkInterruptMode(I2C_NO_INTR_SOURCES);
  47              		.loc 1 63 0
  48 0014 0022     		mov	r2, #0
  49 0016 CB4B     		ldr	r3, .L37+8
  50 0018 1A60     		str	r2, [r3]
  51              	.L3:
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 3


  64:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
  65:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  66:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* Master and Slave error tracking:
  67:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Add the master state check to track only the master errors when the master is active or
  68:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * track slave errors when the slave is active or idle.
  69:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * A special MMS case: in the address phase with misplaced Start: the master sets the LOST_ARB a
  70:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * slave BUS_ERR. The valid event is LOST_ARB comes from the master.
  71:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     */
  72:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(I2C_CHECK_I2C_FSM_MASTER)
  52              		.loc 1 72 0
  53 001a CB4B     		ldr	r3, .L37+12
  54 001c 1B78     		ldrb	r3, [r3]
  55 001e 9B06     		lsl	r3, r3, #26
  56 0020 1FD4     		bmi	.L4
  73:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
  74:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_MASTER)
  75:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
  76:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_MASTER_I2C_BUS_ERROR:
  77:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A misplaced Start or Stop condition occurred on the bus: complete the transaction.
  78:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The interrupt is cleared in I2C_FSM_EXIT_IDLE.
  79:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
  80:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_BUS_ERROR))
  81:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
  82:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
  83:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                          I2C_I2C_MSTAT_ERR_BUS_ERROR);
  84:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  85:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
  86:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
  87:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  88:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_MASTER_I2C_ARB_LOST:
  89:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The MultiMaster lost arbitrage during transaction.
  90:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A Misplaced Start or Stop condition is treated as lost arbitration when the master dr
  91:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The interrupt source is cleared in I2C_FSM_EXIT_IDLE.
  92:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
  93:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_ARB_LOST))
  94:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
  95:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
  96:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                          I2C_I2C_MSTAT_ERR_ARB_LOST);
  97:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  98:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
  99:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 100:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 101:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             #if(I2C_I2C_MULTI_MASTER_SLAVE)
 102:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 103:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* I2C_MASTER_CMD_M_START_ON_IDLE:
 104:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * MultiMaster-Slave does not generate start, because Slave was addressed.
 105:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * Pass control to slave.
 106:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 */
 107:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_MASTER_CMD(I2C_I2C_MASTER_CMD_M_START_ON_IDLE))
 108:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 109:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
 110:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                              I2C_I2C_MSTAT_ERR_ABORT_XFER);
 111:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 112:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 113:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 114:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 115:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             #endif
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 4


 116:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 117:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* The error handling common part:
 118:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * Sets a completion flag of the master transaction and passes control to:
 119:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             *  - I2C_FSM_EXIT_IDLE - to complete transaction in case of: ARB_LOST or BUS_ERR.
 120:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             *  - I2C_FSM_IDLE      - to take chance for the slave to process incoming transaction.
 121:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 122:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(0u != endTransfer)
 123:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 124:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Set completion flags for master */
 125:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) I2C_GET_I2C_MSTAT_CMPLT;
 126:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 127:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if(I2C_I2C_MULTI_MASTER_SLAVE)
 128:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 129:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_FSM_ADDR)
 130:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 131:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Start generation is set after another master starts accessing Slave.
 132:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * Clean-up master and turn to slave. Set state to IDLE.
 133:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 134:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_I2C_MASTER_CMD(I2C_I2C_MASTER_CMD_M_START_ON_IDLE))
 135:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 136:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_I2C_MASTER_CLEAR_START;
 137:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 138:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 139:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 140:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Valid arbitration lost on the address phase happens only when: master LO
 141:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * slave BUS_ERR is cleared. Only in that case set the state to IDLE without
 142:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 143:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if((!I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_BUS_ERROR))
 144:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                && I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_ARB_LOST))
 145:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 146:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 147:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 148:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 149:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 150:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = 0u; /* Causes I2C_FSM_EXIT_IDLE to be set below */
 151:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 152:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 153:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(0u != endTransfer) /* Clean-up master to proceed with slave */
 154:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 155:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_CLEAR_TX_FIFO; /* Shifter keeps address, clear it */
 156:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 157:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_DISABLE_MASTER_AUTO_DATA_ACK; /* In case of reading disable autoACK
 158:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 159:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Clean-up master interrupt sources */
 160:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_ALL);
 161:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 162:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Disable data processing interrupts: they have to be cleared before *
 163:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 164:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 165:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 166:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_IDLE;
 167:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 168:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 169:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 170:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Set I2C_FSM_EXIT_IDLE for BUS_ERR and ARB_LOST (that is really bus e
 171:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_EXIT_IDLE;
 172:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 5


 173:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 174:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 175:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 176:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Set I2C_FSM_EXIT_IDLE if any other state than address */
 177:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state = I2C_I2C_FSM_EXIT_IDLE;
 178:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 179:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 180:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #else
 181:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 182:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* In case of LOST*/
 183:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_state = I2C_I2C_FSM_EXIT_IDLE;
 184:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 185:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif
 186:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 187:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         }
 188:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 189:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 190:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     else /* (I2C_CHECK_I2C_FSM_SLAVE) */
 191:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 192:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_SLAVE)
 193:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
 194:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_I2C_BUS_ERROR or I2C_INTR_SLAVE_I2C_ARB_LOST:
 195:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A Misplaced Start or Stop condition occurred on the bus: set a flag
 196:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * to notify an error condition.
 197:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 198:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_BUS_ERROR |
  57              		.loc 1 198 0
  58 0022 CA4B     		ldr	r3, .L37+16
  59 0024 1A68     		ldr	r2, [r3]
  60 0026 0223     		mov	r3, #2
  61 0028 FF33     		add	r3, r3, #255
  62 002a 1A42     		tst	r2, r3
  63 002c 19D0     		beq	.L4
 199:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                         I2C_INTR_SLAVE_I2C_ARB_LOST))
 200:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 201:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_FSM_RD)
  64              		.loc 1 201 0
  65 002e C64B     		ldr	r3, .L37+12
  66 0030 1B78     		ldrb	r3, [r3]
  67 0032 DB07     		lsl	r3, r3, #31
  68 0034 09D5     		bpl	.L5
 202:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 203:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* TX direction: master reads from slave */
 204:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_RD_BUSY;
  69              		.loc 1 204 0
  70 0036 C64B     		ldr	r3, .L37+20
  71 0038 1A78     		ldrb	r2, [r3]
  72 003a 0221     		mov	r1, #2
  73 003c 8A43     		bic	r2, r1
  74 003e 1A70     		strb	r2, [r3]
 205:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) (I2C_I2C_SSTAT_RD_ERR |
  75              		.loc 1 205 0
  76 0040 1978     		ldrb	r1, [r3]
  77 0042 0922     		mov	r2, #9
  78 0044 0A43     		orr	r2, r1
  79 0046 1A70     		strb	r2, [r3]
  80 0048 08E0     		b	.L6
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 6


  81              	.L5:
 206:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                           I2C_I2C_SSTAT_RD_CMPLT);
 207:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 208:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else
 209:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 210:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* RX direction: master writes into slave */
 211:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_WR_BUSY;
  82              		.loc 1 211 0
  83 004a C14B     		ldr	r3, .L37+20
  84 004c 1A78     		ldrb	r2, [r3]
  85 004e 2021     		mov	r1, #32
  86 0050 8A43     		bic	r2, r1
  87 0052 1A70     		strb	r2, [r3]
 212:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) (I2C_I2C_SSTAT_WR_ERR |
  88              		.loc 1 212 0
  89 0054 1978     		ldrb	r1, [r3]
  90 0056 9022     		mov	r2, #144
  91 0058 0A43     		orr	r2, r1
  92 005a 1A70     		strb	r2, [r3]
  93              	.L6:
 213:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                           I2C_I2C_SSTAT_WR_CMPLT);
 214:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 215:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 216:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state = I2C_I2C_FSM_EXIT_IDLE;
  94              		.loc 1 216 0
  95 005c 0022     		mov	r2, #0
  96 005e BA4B     		ldr	r3, .L37+12
  97 0060 1A70     		strb	r2, [r3]
  98              	.L4:
 217:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 218:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         }
 219:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 220:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 221:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 222:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* States description:
 223:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Any Master operation starts from: the ADDR_RD/WR state as the master generates traffic on the
 224:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Any Slave operation starts from: the IDLE state as the slave always waits for actions from th
 225:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     */
 226:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 227:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* FSM Master */
 228:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(I2C_CHECK_I2C_FSM_MASTER)
  99              		.loc 1 228 0
 100 0062 B94B     		ldr	r3, .L37+12
 101 0064 1B78     		ldrb	r3, [r3]
 102 0066 9B06     		lsl	r3, r3, #26
 103 0068 00D5     		bpl	.LCB95
 104 006a 66E1     		b	.L1	@long jump
 105              	.LCB95:
 229:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 230:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_MASTER)
 231:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
 232:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_MASTER_I2C_STOP:
 233:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A Stop condition was generated by the master: the end of the transaction.
 234:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * Set completion flags to notify the API.
 235:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 236:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_STOP))
 237:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 7


 238:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_I2C_STOP);
 239:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 240:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) I2C_GET_I2C_MSTAT_CMPLT;
 241:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state       = I2C_I2C_FSM_IDLE;
 242:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 243:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             else
 244:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 245:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_FSM_ADDR) /* Address stage */
 246:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 247:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* INTR_MASTER_I2C_NACK:
 248:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * The master sent an address but it was NACKed by the slave. Complete transacti
 249:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 250:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_NACK))
 251:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 252:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_I2C_NACK);
 253:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 254:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
 255:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                  I2C_I2C_MSTAT_ERR_ADDR_NAK);
 256:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 257:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 258:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 259:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* INTR_TX_UNDERFLOW. The master sent an address:
 260:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *  - TX direction: the clock is stretched after the ACK phase, because the TX F
 261:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *    EMPTY. The TX EMPTY cleans all the TX interrupt sources.
 262:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *  - RX direction: the 1st byte is received, but there is no ACK permission,
 263:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *    the clock is stretched after 1 byte is received.
 264:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 265:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 266:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 267:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_I2C_FSM_RD) /* Reading */
 268:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 269:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_MSTR_RD_DATA;
 270:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 271:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else /* Writing */
 272:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 273:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_MSTR_WR_DATA;
 274:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(0u != I2C_mstrWrBufSize)
 275:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 276:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* Enable INTR.TX_EMPTY if there is data to transmit */
 277:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetTxInterruptMode(I2C_INTR_TX_EMPTY);
 278:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 279:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 280:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 281:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 282:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 283:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_FSM_DATA) /* Data phase */
 284:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 285:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_FSM_RD) /* Reading */
 286:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 287:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_RX_FULL:
 288:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * RX direction: the master received 8 bytes.
 289:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * Get data from RX FIFO and decide whether to ACK or  NACK the following by
 290:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 291:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_FULL))
 292:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 293:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Calculate difference */
 294:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             diffCount =  I2C_mstrRdBufSize -
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 8


 295:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                         (I2C_mstrRdBufIndex + I2C_GET_RX_FIFO_ENTRIES);
 296:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 297:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Proceed transaction or end it when RX FIFO becomes FULL again */
 298:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(diffCount > I2C_I2C_FIFO_SIZE)
 299:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 300:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 diffCount = I2C_I2C_FIFO_SIZE;
 301:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 302:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 303:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 304:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 if(0u == diffCount)
 305:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 306:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_DISABLE_MASTER_AUTO_DATA_ACK;
 307:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 308:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     diffCount   = I2C_I2C_FIFO_SIZE;
 309:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 310:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 311:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 312:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 313:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             for(; (0u != diffCount); diffCount--)
 314:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 315:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_mstrRdBufPtr[I2C_mstrRdBufIndex] = (uint8)
 316:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                                         I2C_RX_FIFO
 317:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_mstrRdBufIndex++;
 318:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 319:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 320:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_RX_NOT_EMPTY:
 321:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * RX direction: the master received one data byte, ACK or NACK it.
 322:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The last byte is stored and NACKed by the master. The NACK and Stop is
 323:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * generated by one command generate Stop.
 324:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 325:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_NOT_EMPTY))
 326:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 327:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Put data in component buffer */
 328:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrRdBufPtr[I2C_mstrRdBufIndex] = (uint8) I2C_RX_FIFO_RD_REG;
 329:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrRdBufIndex++;
 330:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 331:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(I2C_mstrRdBufIndex < I2C_mstrRdBufSize)
 332:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 333:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_I2C_MASTER_GENERATE_ACK;
 334:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 335:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 336:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 337:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 338:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 339:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 340:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 341:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 342:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Do nothing */
 343:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 344:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 345:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_ClearRxInterruptSource(I2C_INTR_RX_ALL);
 346:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 347:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else /* Writing */
 348:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 349:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_MASTER_I2C_NACK :
 350:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The master writes data to the slave and NACK was received: not all the by
 351:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * written to the slave from the TX FIFO. Revert the index if there is data 
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 9


 352:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * the TX FIFO and pass control to a complete transfer.
 353:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 354:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_NACK))
 355:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 356:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_I2C_NACK);
 357:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 358:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Rollback write buffer index: NACKed byte remains in shifter */
 359:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrWrBufIndexTmp -= (I2C_GET_TX_FIFO_ENTRIES +
 360:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                    I2C_GET_TX_FIFO_SR_VALID);
 361:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 362:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Update number of transferred bytes */
 363:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrWrBufIndex = I2C_mstrWrBufIndexTmp;
 364:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 365:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
 366:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                      I2C_I2C_MSTAT_ERR_SHORT_XFER);
 367:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 368:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_CLEAR_TX_FIFO;
 369:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 370:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 371:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 372:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_TX_EMPTY :
 373:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * TX direction: the TX FIFO is EMPTY, the data from the buffer needs to be 
 374:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * When there is no data in the component buffer, the underflow interrupt is
 375:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * enabled to catch when all the data has been transferred.
 376:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 377:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if(I2C_CHECK_INTR_TX_MASKED(I2C_INTR_TX_EMPTY))
 378:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 379:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             while(I2C_I2C_FIFO_SIZE != I2C_GET_TX_FIFO_ENTRIES)
 380:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 381:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* The temporary mstrWrBufIndexTmp is used because slave could NACK
 382:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 * roll-back required in this case. The mstrWrBufIndex is updated at
 383:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 */
 384:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 if(I2C_mstrWrBufIndexTmp < I2C_mstrWrBufSize)
 385:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 386:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 #if(!I2C_CY_SCBIP_V0)
 387:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                    /* Clear INTR_TX.UNDERFLOW before putting the last byte into TX 
 388:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     * a proper trigger at the end of transaction when INTR_TX.UNDER
 389:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     * event. Ticket ID# 156735.
 390:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     */
 391:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     if(I2C_mstrWrBufIndexTmp == (I2C_mstrWrBufSize - 1u))
 392:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     {
 393:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                         I2C_ClearTxInterruptSource(I2C_INTR_TX_UNDERFLOW);
 394:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                         I2C_SetTxInterruptMode(I2C_INTR_TX_UNDERFLOW);
 395:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     }
 396:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                  #endif /* (!I2C_CY_SCBIP_V0) */
 397:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 398:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     /* Put data into TX FIFO */
 399:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_TX_FIFO_WR_REG = (uint32) I2C_mstrWrBufPtr[I2C_mstrWrBufInd
 400:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_mstrWrBufIndexTmp++;
 401:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 402:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 else
 403:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 404:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     break; /* No more data to put */
 405:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 406:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 407:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 408:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #if(I2C_CY_SCBIP_V0)
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 10


 409:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(I2C_mstrWrBufIndexTmp == I2C_mstrWrBufSize)
 410:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 411:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetTxInterruptMode(I2C_INTR_TX_UNDERFLOW);
 412:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 413:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 414:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearTxInterruptSource(I2C_INTR_TX_ALL);
 415:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #else
 416:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearTxInterruptSource(I2C_INTR_TX_EMPTY);
 417:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #endif /* (I2C_CY_SCBIP_V0) */
 418:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 419:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_TX_UNDERFLOW:
 420:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * TX direction: all data from the TX FIFO was transferred to the slave.
 421:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The transaction needs to be completed.
 422:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 423:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if(I2C_CHECK_INTR_TX_MASKED(I2C_INTR_TX_UNDERFLOW))
 424:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 425:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Update number of transferred bytes */
 426:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrWrBufIndex = I2C_mstrWrBufIndexTmp;
 427:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 428:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 429:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 430:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 431:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 432:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Do nothing */
 433:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 434:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 435:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 436:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 437:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(0u != endTransfer) /* Complete transfer */
 438:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 439:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clean-up master after reading: only in case of NACK */
 440:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_DISABLE_MASTER_AUTO_DATA_ACK;
 441:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 442:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Disable data processing interrupts: they have to be cleared before */
 443:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 444:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 445:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 446:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_MODE_NO_STOP(I2C_mstrControl))
 447:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 448:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* On-going transaction is suspended: the ReStart is generated by the API r
 449:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_XFER_HALT |
 450:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                  I2C_GET_I2C_MSTAT_CMPLT);
 451:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 452:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state = I2C_I2C_FSM_MSTR_HALT;
 453:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 454:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 455:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 456:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Complete transaction: exclude the data processing state and generate Sto
 457:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The completion status will be set after Stop generation.
 458:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * A special case is read: because NACK and Stop are generated by the comman
 459:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * Lost arbitration can occur during NACK generation when
 460:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * the other master is still reading from the slave.
 461:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 462:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_I2C_MASTER_GENERATE_STOP;
 463:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 464:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 465:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 11


 466:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 467:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         } /* (I2C_I2C_MASTER) */
 468:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 469:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 470:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     } /* (I2C_CHECK_I2C_FSM_MASTER) */
 471:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 472:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 473:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* FSM Slave */
 474:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     else if(I2C_CHECK_I2C_FSM_SLAVE)
 106              		.loc 1 474 0
 107 006c B64B     		ldr	r3, .L37+12
 108 006e 1B78     		ldrb	r3, [r3]
 109 0070 DB06     		lsl	r3, r3, #27
 110 0072 00D4     		bmi	.LCB103
 111 0074 4BE1     		b	.L8	@long jump
 112              	.LCB103:
 475:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 476:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_SLAVE)
 477:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
 478:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_NACK:
 479:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The master completes reading the slave: the appropriate flags have to be set.
 480:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The TX FIFO is cleared after an overflow condition is set.
 481:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 482:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_NACK))
 113              		.loc 1 482 0
 114 0076 B54B     		ldr	r3, .L37+16
 115 0078 1B68     		ldr	r3, [r3]
 116 007a 9B07     		lsl	r3, r3, #30
 117 007c 3ED5     		bpl	.L9
 483:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 484:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_I2C_NACK);
 118              		.loc 1 484 0
 119 007e 0222     		mov	r2, #2
 120 0080 B44B     		ldr	r3, .L37+24
 121 0082 1A60     		str	r2, [r3]
 485:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 486:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* All entries that remain in TX FIFO max value is 9: 8 (FIFO) + 1 (SHIFTER) */
 487:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 diffCount = (I2C_GET_TX_FIFO_ENTRIES + I2C_GET_TX_FIFO_SR_VALID);
 122              		.loc 1 487 0
 123 0084 B44A     		ldr	r2, .L37+28
 124 0086 1368     		ldr	r3, [r2]
 125 0088 1F21     		mov	r1, #31
 126 008a 1940     		and	r1, r3
 127 008c 1368     		ldr	r3, [r2]
 128 008e 8022     		mov	r2, #128
 129 0090 1202     		lsl	r2, r2, #8
 130 0092 1340     		and	r3, r2
 131 0094 00D0     		beq	.L10
 132 0096 0123     		mov	r3, #1
 133              	.L10:
 134              		.loc 1 487 0 is_stmt 0 discriminator 4
 135 0098 CB18     		add	r3, r1, r3
 136              	.LVL2:
 488:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 489:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_slOverFlowCount > diffCount) /* Overflow */
 137              		.loc 1 489 0 is_stmt 1 discriminator 4
 138 009a B04A     		ldr	r2, .L37+32
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 12


 139 009c 1278     		ldrb	r2, [r2]
 140 009e D2B2     		uxtb	r2, r2
 141 00a0 9A42     		cmp	r2, r3
 142 00a2 05D9     		bls	.L11
 490:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 491:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) I2C_I2C_SSTAT_RD_OVFL;
 143              		.loc 1 491 0
 144 00a4 AA4A     		ldr	r2, .L37+20
 145 00a6 1178     		ldrb	r1, [r2]
 146 00a8 0423     		mov	r3, #4
 147              	.LVL3:
 148 00aa 0B43     		orr	r3, r1
 149 00ac 1370     		strb	r3, [r2]
 150 00ae 06E0     		b	.L12
 151              	.LVL4:
 152              	.L11:
 492:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 493:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else /* No Overflow */
 494:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 495:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Roll-back temporary index */
 496:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slRdBufIndexTmp -= (diffCount - I2C_slOverFlowCount);
 153              		.loc 1 496 0
 154 00b0 AA4A     		ldr	r2, .L37+32
 155 00b2 1278     		ldrb	r2, [r2]
 156 00b4 9B1A     		sub	r3, r3, r2
 157              	.LVL5:
 158 00b6 AA49     		ldr	r1, .L37+36
 159 00b8 0A68     		ldr	r2, [r1]
 160 00ba D31A     		sub	r3, r2, r3
 161 00bc 0B60     		str	r3, [r1]
 162              	.L12:
 497:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 498:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 499:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Update slave of transferred bytes */
 500:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slRdBufIndex = I2C_slRdBufIndexTmp;
 163              		.loc 1 500 0
 164 00be A84B     		ldr	r3, .L37+36
 165 00c0 1A68     		ldr	r2, [r3]
 166 00c2 A84B     		ldr	r3, .L37+40
 167 00c4 1A60     		str	r2, [r3]
 501:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 502:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Clean-up TX FIFO */
 503:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 168              		.loc 1 503 0
 169 00c6 0023     		mov	r3, #0
 170 00c8 A74A     		ldr	r2, .L37+44
 171 00ca 1360     		str	r3, [r2]
 504:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slOverFlowCount = 0u;
 172              		.loc 1 504 0
 173 00cc A34A     		ldr	r2, .L37+32
 174 00ce 1370     		strb	r3, [r2]
 505:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_CLEAR_TX_FIFO;
 175              		.loc 1 505 0
 176 00d0 A64B     		ldr	r3, .L37+48
 177 00d2 1A68     		ldr	r2, [r3]
 178 00d4 8021     		mov	r1, #128
 179 00d6 4902     		lsl	r1, r1, #9
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 13


 180 00d8 0A43     		orr	r2, r1
 181 00da 1A60     		str	r2, [r3]
 182 00dc 1968     		ldr	r1, [r3]
 183 00de A44A     		ldr	r2, .L37+52
 184 00e0 0A40     		and	r2, r1
 185 00e2 1A60     		str	r2, [r3]
 506:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 507:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Complete master reading */
 508:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_RD_BUSY;
 186              		.loc 1 508 0
 187 00e4 9A4B     		ldr	r3, .L37+20
 188 00e6 1A78     		ldrb	r2, [r3]
 189 00e8 0221     		mov	r1, #2
 190 00ea 8A43     		bic	r2, r1
 191 00ec 1A70     		strb	r2, [r3]
 509:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus |= (uint8)  I2C_I2C_SSTAT_RD_CMPLT;
 192              		.loc 1 509 0
 193 00ee 1978     		ldrb	r1, [r3]
 194 00f0 0122     		mov	r2, #1
 195 00f2 0A43     		orr	r2, r1
 196 00f4 1A70     		strb	r2, [r3]
 510:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state     =  I2C_I2C_FSM_IDLE;
 197              		.loc 1 510 0
 198 00f6 1022     		mov	r2, #16
 199 00f8 934B     		ldr	r3, .L37+12
 200 00fa 1A70     		strb	r2, [r3]
 201              	.L9:
 511:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 512:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 513:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 514:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_I2C_WRITE_STOP:
 515:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The master completes writing to the slave: the appropriate flags have to be set.
 516:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The RX FIFO contains 1-8 bytes from the previous transaction which needs to be read.
 517:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * There is a possibility that RX FIFO contains an address, it needs to leave it there.
 518:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 519:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_WRITE_STOP))
 202              		.loc 1 519 0
 203 00fc 934B     		ldr	r3, .L37+16
 204 00fe 1B68     		ldr	r3, [r3]
 205 0100 1B07     		lsl	r3, r3, #28
 206 0102 37D5     		bpl	.L13
 520:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 521:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_I2C_WRITE_STOP);
 207              		.loc 1 521 0
 208 0104 0822     		mov	r2, #8
 209 0106 934B     		ldr	r3, .L37+24
 210 0108 1A60     		str	r2, [r3]
 522:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 523:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Read bytes from RX FIFO when auto data ACK receive logic is enabled. Otherwise a
 524:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * were already read from the RX FIFO except for address byte which has to stay here
 525:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * I2C_ADDR_MATCH.
 526:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 */
 527:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if (0u != (I2C_I2C_CTRL_REG & I2C_I2C_CTRL_S_READY_DATA_ACK))
 211              		.loc 1 527 0
 212 010a 9A4B     		ldr	r3, .L37+56
 213 010c 1B68     		ldr	r3, [r3]
 214 010e 9B04     		lsl	r3, r3, #18
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 14


 215 0110 0CD4     		bmi	.L14
 216 0112 14E0     		b	.L15
 217              	.L16:
 528:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 529:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     while(0u != I2C_GET_RX_FIFO_ENTRIES)
 530:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 531:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #if(I2C_CHECK_I2C_ACCEPT_ADDRESS)
 532:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 533:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if((1u == I2C_GET_RX_FIFO_ENTRIES) &&
 534:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                (I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_ADDR_MATCH)))
 535:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 536:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 break; /* Leave address in RX FIFO */
 537:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 538:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 539:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #endif
 540:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 541:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Put data in component buffer */
 542:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slWrBufPtr[I2C_slWrBufIndex] = (uint8) I2C_RX_FIFO_RD_REG;
 218              		.loc 1 542 0
 219 0114 984B     		ldr	r3, .L37+60
 220 0116 1A68     		ldr	r2, [r3]
 221 0118 9849     		ldr	r1, .L37+64
 222 011a 0968     		ldr	r1, [r1]
 223 011c 8A18     		add	r2, r1, r2
 224 011e 9849     		ldr	r1, .L37+68
 225 0120 0968     		ldr	r1, [r1]
 226 0122 C9B2     		uxtb	r1, r1
 227 0124 1170     		strb	r1, [r2]
 543:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slWrBufIndex++;
 228              		.loc 1 543 0
 229 0126 1A68     		ldr	r2, [r3]
 230 0128 0132     		add	r2, r2, #1
 231 012a 1A60     		str	r2, [r3]
 232              	.L14:
 529:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 233              		.loc 1 529 0
 234 012c 954B     		ldr	r3, .L37+72
 235 012e 1B68     		ldr	r3, [r3]
 236 0130 DB06     		lsl	r3, r3, #27
 237 0132 EFD1     		bne	.L16
 544:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 545:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 546:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_DISABLE_SLAVE_AUTO_DATA;
 238              		.loc 1 546 0
 239 0134 8F4A     		ldr	r2, .L37+56
 240 0136 1168     		ldr	r1, [r2]
 241 0138 934B     		ldr	r3, .L37+76
 242 013a 0B40     		and	r3, r1
 243 013c 1360     		str	r3, [r2]
 244              	.L15:
 547:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 548:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 549:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_INTR_RX(I2C_INTR_RX_OVERFLOW))
 245              		.loc 1 549 0
 246 013e 934B     		ldr	r3, .L37+80
 247 0140 1B68     		ldr	r3, [r3]
 248 0142 9B06     		lsl	r3, r3, #26
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 15


 249 0144 04D5     		bpl	.L17
 550:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 551:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) I2C_I2C_SSTAT_WR_OVFL;
 250              		.loc 1 551 0
 251 0146 824A     		ldr	r2, .L37+20
 252 0148 1178     		ldrb	r1, [r2]
 253 014a 4023     		mov	r3, #64
 254 014c 0B43     		orr	r3, r1
 255 014e 1370     		strb	r3, [r2]
 256              	.L17:
 552:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 553:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 554:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Clears RX interrupt sources triggered on data receiving */
 555:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 257              		.loc 1 555 0
 258 0150 0022     		mov	r2, #0
 259 0152 8F4B     		ldr	r3, .L37+84
 260 0154 1A60     		str	r2, [r3]
 556:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearRxInterruptSource(I2C_INTR_RX_ALL);
 261              		.loc 1 556 0
 262 0156 8F4A     		ldr	r2, .L37+88
 263 0158 8C4B     		ldr	r3, .L37+80
 264 015a 1A60     		str	r2, [r3]
 557:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 558:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Complete master writing */
 559:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_WR_BUSY;
 265              		.loc 1 559 0
 266 015c 7C4B     		ldr	r3, .L37+20
 267 015e 1A78     		ldrb	r2, [r3]
 268 0160 2021     		mov	r1, #32
 269 0162 8A43     		bic	r2, r1
 270 0164 1A70     		strb	r2, [r3]
 560:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus |= (uint8)  I2C_I2C_SSTAT_WR_CMPLT;
 271              		.loc 1 560 0
 272 0166 1978     		ldrb	r1, [r3]
 273 0168 1022     		mov	r2, #16
 274 016a 0A43     		orr	r2, r1
 275 016c 1A70     		strb	r2, [r3]
 561:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state     =  I2C_I2C_FSM_IDLE;
 276              		.loc 1 561 0
 277 016e 764B     		ldr	r3, .L37+12
 278 0170 1022     		mov	r2, #16
 279 0172 1A70     		strb	r2, [r3]
 280              	.L13:
 562:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 563:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 564:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 565:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_I2C_ADDR_MATCH or INTR_SLAVE_I2C_GENERAL:
 566:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The address match or general call address event starts the slave operation:
 567:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * after leaving the TX or RX direction has to be chosen.
 568:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The wakeup interrupt must be cleared only after an address match is set.
 569:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 570:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 571:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if (I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_ADDR_MATCH |
 572:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                          I2C_INTR_SLAVE_I2C_GENERAL))
 573:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #else
 574:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if (I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_ADDR_MATCH))
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 16


 281              		.loc 1 574 0
 282 0174 754B     		ldr	r3, .L37+16
 283 0176 1B68     		ldr	r3, [r3]
 284 0178 5B06     		lsl	r3, r3, #25
 285 017a 46D5     		bpl	.L18
 575:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif /* (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 576:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 577:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Clear externally clocked address match interrupt source when internally clocked 
 578:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearI2CExtClkInterruptSource(I2C_INTR_I2C_EC_WAKE_UP);
 286              		.loc 1 578 0
 287 017c 0122     		mov	r2, #1
 288 017e 864B     		ldr	r3, .L37+92
 289 0180 1A60     		str	r2, [r3]
 579:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 580:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER)
 581:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 582:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if (NULL != I2C_customAddressHandler)
 583:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 584:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Call custom address handler */
 585:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         response = I2C_customAddressHandler();
 586:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 587:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 588:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 589:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Read address from the RX FIFO. If there is no address underflow triggers
 590:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * componnet does not use that source. */
 591:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         (void) I2C_RX_FIFO_RD_REG;
 592:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         response = I2C_I2C_ACK_ADDR;
 593:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 594:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 595:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clears RX sources after address was received in the RX FIFO */
 596:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ClearRxInterruptSource(I2C_INTR_RX_ALL);
 597:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 598:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif
 599:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 600:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 601:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if (response == I2C_I2C_NAK_ADDR)
 602:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 603:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if (!I2C_CY_SCBIP_V0)
 604:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Disable write stop interrupt source as it triggers after address was NACKed.
 605:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_DISABLE_INTR_SLAVE(I2C_INTR_SLAVE_I2C_WRITE_STOP);
 606:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif /* (!I2C_CY_SCBIP_V0) */
 607:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 608:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clear address match and stop history */
 609:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_ALL);
 610:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 611:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* ACK the address byte */
 612:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_NACK;
 613:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 614:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else
 615:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             #endif /* (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 616:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 617:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_STATUS(I2C_I2C_STATUS_S_READ))
 290              		.loc 1 617 0
 291 0182 864B     		ldr	r3, .L37+96
 292 0184 1B68     		ldr	r3, [r3]
 293 0186 DB06     		lsl	r3, r3, #27
 294 0188 0FD5     		bpl	.L19
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 17


 618:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* TX direction: master reads from slave */
 619:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 620:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_SetTxInterruptMode(I2C_INTR_TX_EMPTY);
 295              		.loc 1 620 0
 296 018a 0F32     		add	r2, r2, #15
 297 018c 764B     		ldr	r3, .L37+44
 298 018e 1A60     		str	r2, [r3]
 621:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 622:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Set temporary index to address buffer clear from API */
 623:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slRdBufIndexTmp = I2C_slRdBufIndex;
 299              		.loc 1 623 0
 300 0190 744B     		ldr	r3, .L37+40
 301 0192 1A68     		ldr	r2, [r3]
 302 0194 724B     		ldr	r3, .L37+36
 303 0196 1A60     		str	r2, [r3]
 624:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 625:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Start master reading */
 626:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slStatus |= (uint8) I2C_I2C_SSTAT_RD_BUSY;
 304              		.loc 1 626 0
 305 0198 6D4A     		ldr	r2, .L37+20
 306 019a 1178     		ldrb	r1, [r2]
 307 019c 0223     		mov	r3, #2
 308 019e 0B43     		orr	r3, r1
 309 01a0 1370     		strb	r3, [r2]
 627:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state     = I2C_I2C_FSM_SL_RD;
 310              		.loc 1 627 0
 311 01a2 1222     		mov	r2, #18
 312 01a4 684B     		ldr	r3, .L37+12
 313 01a6 1A70     		strb	r2, [r3]
 314 01a8 24E0     		b	.L20
 315              	.L19:
 628:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 629:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 630:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* RX direction: master writes into slave */
 631:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 632:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Calculate available buffer size */
 633:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         diffCount = (I2C_slWrBufSize - I2C_slWrBufIndex);
 316              		.loc 1 633 0
 317 01aa 7D4B     		ldr	r3, .L37+100
 318 01ac 1B68     		ldr	r3, [r3]
 319 01ae 724A     		ldr	r2, .L37+60
 320 01b0 1268     		ldr	r2, [r2]
 321 01b2 9B1A     		sub	r3, r3, r2
 322              	.LVL6:
 634:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 635:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     #if (I2C_CY_SCBIP_V0)
 636:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(diffCount < I2C_I2C_FIFO_SIZE)
 637:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 638:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 639:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetRxInterruptMode(I2C_INTR_RX_NOT_EMPTY);
 640:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 641:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 642:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Receive data: into RX FIFO */
 643:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 644:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(diffCount == I2C_I2C_FIFO_SIZE)
 645:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 646:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* NACK when RX FIFO become FULL */
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 18


 647:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_ENABLE_SLAVE_AUTO_DATA;
 648:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 649:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 650:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 651:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* Stretch clock when RX FIFO becomes FULL */
 652:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_ENABLE_SLAVE_AUTO_DATA_ACK;
 653:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetRxInterruptMode(I2C_INTR_RX_FULL);
 654:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 655:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 656:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 657:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     #else
 658:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #if(I2C_CHECK_I2C_ACCEPT_ADDRESS)
 659:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 660:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Enable RX.NOT_EMPTY interrupt source to receive byte by byte.
 661:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             * The byte by byte receive is always chosen for the case when an addres
 662:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             * in RX FIFO. Ticket ID#175559.
 663:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             */
 664:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetRxInterruptMode(I2C_INTR_RX_NOT_EMPTY);
 665:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 666:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #else
 667:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 668:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(diffCount < I2C_I2C_FIFO_SIZE)
 323              		.loc 1 668 0
 324 01b4 072B     		cmp	r3, #7
 325 01b6 03D8     		bhi	.L21
 669:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 670:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 671:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetRxInterruptMode(I2C_INTR_RX_NOT_EMPTY);
 326              		.loc 1 671 0
 327 01b8 0422     		mov	r2, #4
 328 01ba 754B     		ldr	r3, .L37+84
 329              	.LVL7:
 330 01bc 1A60     		str	r2, [r3]
 331 01be 11E0     		b	.L22
 332              	.LVL8:
 333              	.L21:
 672:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 673:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 674:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Receive data: into RX FIFO */
 675:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 676:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 if(diffCount == I2C_I2C_FIFO_SIZE)
 334              		.loc 1 676 0
 335 01c0 082B     		cmp	r3, #8
 336 01c2 06D1     		bne	.L23
 677:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 678:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     /* NACK when RX FIFO become FULL */
 679:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_ENABLE_SLAVE_AUTO_DATA;
 337              		.loc 1 679 0
 338 01c4 6B4A     		ldr	r2, .L37+56
 339 01c6 1368     		ldr	r3, [r2]
 340              	.LVL9:
 341 01c8 A021     		mov	r1, #160
 342 01ca 0902     		lsl	r1, r1, #8
 343 01cc 0B43     		orr	r3, r1
 344 01ce 1360     		str	r3, [r2]
 345 01d0 08E0     		b	.L22
 346              	.LVL10:
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 19


 347              	.L23:
 680:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 681:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 else
 682:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 683:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     /* Stretch clock when RX FIFO becomes FULL */
 684:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_ENABLE_SLAVE_AUTO_DATA_ACK;
 348              		.loc 1 684 0
 349 01d2 684A     		ldr	r2, .L37+56
 350 01d4 1368     		ldr	r3, [r2]
 351              	.LVL11:
 352 01d6 8021     		mov	r1, #128
 353 01d8 8901     		lsl	r1, r1, #6
 354 01da 0B43     		orr	r3, r1
 355 01dc 1360     		str	r3, [r2]
 685:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_SetRxInterruptMode(I2C_INTR_RX_FULL);
 356              		.loc 1 685 0
 357 01de 0822     		mov	r2, #8
 358 01e0 6B4B     		ldr	r3, .L37+84
 359 01e2 1A60     		str	r2, [r3]
 360              	.L22:
 686:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 687:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 688:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 689:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #endif
 690:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     #endif /* (I2C_CY_SCBIP_V0) */
 691:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 692:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Start master reading */
 693:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slStatus |= (uint8) I2C_I2C_SSTAT_WR_BUSY;
 361              		.loc 1 693 0
 362 01e4 5A4A     		ldr	r2, .L37+20
 363 01e6 1178     		ldrb	r1, [r2]
 364 01e8 2023     		mov	r3, #32
 365 01ea 0B43     		orr	r3, r1
 366 01ec 1370     		strb	r3, [r2]
 694:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state     = I2C_I2C_FSM_SL_WR;
 367              		.loc 1 694 0
 368 01ee 1122     		mov	r2, #17
 369 01f0 554B     		ldr	r3, .L37+12
 370 01f2 1A70     		strb	r2, [r3]
 371              	.L20:
 695:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 696:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 697:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clear address match and stop history */
 698:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_ALL);
 372              		.loc 1 698 0
 373 01f4 6B4A     		ldr	r2, .L37+104
 374 01f6 574B     		ldr	r3, .L37+24
 375 01f8 1A60     		str	r2, [r3]
 699:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 700:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if (!I2C_CY_SCBIP_V0)
 701:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Enable write stop interrupt source as it triggers after address was NACKed. 
 702:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ENABLE_INTR_SLAVE(I2C_INTR_SLAVE_I2C_WRITE_STOP);
 376              		.loc 1 702 0
 377 01fa 6B4A     		ldr	r2, .L37+108
 378 01fc 1168     		ldr	r1, [r2]
 379 01fe 0823     		mov	r3, #8
 380 0200 0B43     		orr	r3, r1
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 20


 381 0202 1360     		str	r3, [r2]
 703:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif /* (!I2C_CY_SCBIP_V0) */
 704:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 705:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* ACK the address byte */
 706:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_ACK;
 382              		.loc 1 706 0
 383 0204 0122     		mov	r2, #1
 384 0206 694B     		ldr	r3, .L37+112
 385 0208 1A60     		str	r2, [r3]
 386              	.L18:
 707:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 708:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 709:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 710:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* I2C_INTR_RX_FULL:
 711:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * Get data from the RX FIFO and decide whether to ACK or NACK the following bytes
 712:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 713:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_FULL))
 387              		.loc 1 713 0
 388 020a 694B     		ldr	r3, .L37+116
 389 020c 1B68     		ldr	r3, [r3]
 390 020e 1B07     		lsl	r3, r3, #28
 391 0210 2AD5     		bpl	.L24
 714:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 715:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Calculate available buffer size to take into account that RX FIFO is FULL */
 716:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 diffCount =  I2C_slWrBufSize -
 392              		.loc 1 716 0
 393 0212 634B     		ldr	r3, .L37+100
 394 0214 1B68     		ldr	r3, [r3]
 395 0216 584A     		ldr	r2, .L37+60
 396 0218 1068     		ldr	r0, [r2]
 397 021a 181A     		sub	r0, r3, r0
 398 021c 0838     		sub	r0, r0, #8
 399              	.LVL12:
 717:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             (I2C_slWrBufIndex + I2C_I2C_FIFO_SIZE);
 718:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 719:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(diffCount > I2C_I2C_FIFO_SIZE) /* Proceed transaction */
 400              		.loc 1 719 0
 401 021e 0828     		cmp	r0, #8
 402 0220 02D9     		bls	.L36
 720:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 721:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     diffCount   = I2C_I2C_FIFO_SIZE;
 722:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 403              		.loc 1 722 0
 404 0222 0024     		mov	r4, #0
 721:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 405              		.loc 1 721 0
 406 0224 0820     		mov	r0, #8
 407              	.LVL13:
 408 0226 0EE0     		b	.L26
 409              	.LVL14:
 410              	.L36:
 723:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 724:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else /* End when FIFO becomes FULL again */
 725:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 726:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 411              		.loc 1 726 0
 412 0228 0124     		mov	r4, #1
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 21


 413 022a 0CE0     		b	.L26
 414              	.LVL15:
 415              	.L27:
 727:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 728:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 729:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 for(; (0u != diffCount); diffCount--)
 730:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 731:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Put data in component buffer */
 732:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufPtr[I2C_slWrBufIndex] = (uint8) I2C_RX_FIFO_RD_REG;
 416              		.loc 1 732 0 discriminator 2
 417 022c 524B     		ldr	r3, .L37+60
 418 022e 1A68     		ldr	r2, [r3]
 419 0230 5249     		ldr	r1, .L37+64
 420 0232 0968     		ldr	r1, [r1]
 421 0234 8A18     		add	r2, r1, r2
 422 0236 5249     		ldr	r1, .L37+68
 423 0238 0968     		ldr	r1, [r1]
 424 023a C9B2     		uxtb	r1, r1
 425 023c 1170     		strb	r1, [r2]
 733:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufIndex++;
 426              		.loc 1 733 0 discriminator 2
 427 023e 1A68     		ldr	r2, [r3]
 428 0240 0132     		add	r2, r2, #1
 429 0242 1A60     		str	r2, [r3]
 729:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 430              		.loc 1 729 0 discriminator 2
 431 0244 0138     		sub	r0, r0, #1
 432              	.LVL16:
 433              	.L26:
 729:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 434              		.loc 1 729 0 is_stmt 0 discriminator 1
 435 0246 0028     		cmp	r0, #0
 436 0248 F0D1     		bne	.L27
 734:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 735:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 736:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(0u != endTransfer) /* End transfer sending NACK */
 437              		.loc 1 736 0 is_stmt 1
 438 024a 002C     		cmp	r4, #0
 439 024c 08D0     		beq	.L28
 737:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 738:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ENABLE_SLAVE_AUTO_DATA_NACK;
 440              		.loc 1 738 0
 441 024e 494A     		ldr	r2, .L37+56
 442 0250 1368     		ldr	r3, [r2]
 443 0252 8021     		mov	r1, #128
 444 0254 0902     		lsl	r1, r1, #8
 445 0256 0B43     		orr	r3, r1
 446 0258 1360     		str	r3, [r2]
 739:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 740:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* INTR_RX_FULL triggers earlier than INTR_SLAVE_I2C_STOP:
 741:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * disable all RX interrupt sources.
 742:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 743:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 447              		.loc 1 743 0
 448 025a 0022     		mov	r2, #0
 449 025c 4C4B     		ldr	r3, .L37+84
 450 025e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 22


 451              	.L28:
 744:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 745:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 746:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearRxInterruptSource(I2C_INTR_RX_FULL);
 452              		.loc 1 746 0
 453 0260 0822     		mov	r2, #8
 454 0262 4A4B     		ldr	r3, .L37+80
 455 0264 1A60     		str	r2, [r3]
 456 0266 24E0     		b	.L29
 457              	.LVL17:
 458              	.L24:
 747:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 748:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* I2C_INTR_RX_NOT_EMPTY:
 749:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The buffer size is less than 8: it requires processing in byte-by-byte mode.
 750:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 751:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             else if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_NOT_EMPTY))
 459              		.loc 1 751 0
 460 0268 514B     		ldr	r3, .L37+116
 461 026a 1B68     		ldr	r3, [r3]
 462 026c 5B07     		lsl	r3, r3, #29
 463 026e 20D5     		bpl	.L29
 752:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 753:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 diffCount = I2C_RX_FIFO_RD_REG;
 464              		.loc 1 753 0
 465 0270 434B     		ldr	r3, .L37+68
 466 0272 1B68     		ldr	r3, [r3]
 467              	.LVL18:
 754:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 755:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_slWrBufIndex < I2C_slWrBufSize)
 468              		.loc 1 755 0
 469 0274 404A     		ldr	r2, .L37+60
 470 0276 1168     		ldr	r1, [r2]
 471 0278 494A     		ldr	r2, .L37+100
 472 027a 1268     		ldr	r2, [r2]
 473 027c 9142     		cmp	r1, r2
 474 027e 0DD2     		bcs	.L30
 756:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 757:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_ACK;
 475              		.loc 1 757 0
 476 0280 0121     		mov	r1, #1
 477 0282 4A4A     		ldr	r2, .L37+112
 478 0284 1160     		str	r1, [r2]
 758:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 759:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Put data into component buffer */
 760:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufPtr[I2C_slWrBufIndex] = (uint8) diffCount;
 479              		.loc 1 760 0
 480 0286 3C4A     		ldr	r2, .L37+60
 481 0288 1168     		ldr	r1, [r2]
 482 028a 3C48     		ldr	r0, .L37+64
 483 028c 0068     		ldr	r0, [r0]
 484 028e 4118     		add	r1, r0, r1
 485 0290 DBB2     		uxtb	r3, r3
 486              	.LVL19:
 487 0292 0B70     		strb	r3, [r1]
 761:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufIndex++;
 488              		.loc 1 761 0
 489 0294 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 23


 490 0296 0133     		add	r3, r3, #1
 491 0298 1360     		str	r3, [r2]
 492 029a 07E0     		b	.L31
 493              	.LVL20:
 494              	.L30:
 762:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 763:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else /* Overflow: there is no space in write buffer */
 764:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 765:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_NACK;
 495              		.loc 1 765 0
 496 029c 0222     		mov	r2, #2
 497 029e 434B     		ldr	r3, .L37+112
 498              	.LVL21:
 499 02a0 1A60     		str	r2, [r3]
 766:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 767:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) I2C_I2C_SSTAT_WR_OVFL;
 500              		.loc 1 767 0
 501 02a2 2B4A     		ldr	r2, .L37+20
 502 02a4 1178     		ldrb	r1, [r2]
 503 02a6 4023     		mov	r3, #64
 504 02a8 0B43     		orr	r3, r1
 505 02aa 1370     		strb	r3, [r2]
 506              	.L31:
 768:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 769:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 770:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearRxInterruptSource(I2C_INTR_RX_NOT_EMPTY);
 507              		.loc 1 770 0
 508 02ac 0422     		mov	r2, #4
 509 02ae 374B     		ldr	r3, .L37+80
 510 02b0 1A60     		str	r2, [r3]
 511              	.LVL22:
 512              	.L29:
 771:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 772:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             else
 773:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 774:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Does nothing */
 775:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 776:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 777:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 778:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* I2C_INTR_TX_EMPTY:
 779:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The master reads the slave: provide data to read or 0xFF in the case of the end of th
 780:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The overflow condition must be captured, but not set until the end of transaction.
 781:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             * There is a possibility of a false overflow due to TX FIFO utilization.
 782:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 783:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_TX_MASKED(I2C_INTR_TX_EMPTY))
 513              		.loc 1 783 0
 514 02b2 404B     		ldr	r3, .L37+120
 515 02b4 1B68     		ldr	r3, [r3]
 516 02b6 DB06     		lsl	r3, r3, #27
 517 02b8 1FD4     		bmi	.L32
 518 02ba 3EE0     		b	.L1
 519              	.L35:
 784:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 785:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 while(I2C_I2C_FIFO_SIZE != I2C_GET_TX_FIFO_ENTRIES)
 786:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 787:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Temporary slRdBufIndexTmp is used because the master can NACK the byte and
 788:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * index roll-back is required in this case. The slRdBufIndex is updated at the 
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 24


 789:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * of the read transfer.
 790:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 791:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_slRdBufIndexTmp < I2C_slRdBufSize)
 520              		.loc 1 791 0
 521 02bc 284B     		ldr	r3, .L37+36
 522 02be 1A68     		ldr	r2, [r3]
 523 02c0 3D4B     		ldr	r3, .L37+124
 524 02c2 1B68     		ldr	r3, [r3]
 525 02c4 9A42     		cmp	r2, r3
 526 02c6 0CD2     		bcs	.L33
 792:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Data from buffer */
 793:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 794:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_TX_FIFO_WR_REG = (uint32) I2C_slRdBufPtr[I2C_slRdBufIndexTmp];
 527              		.loc 1 794 0
 528 02c8 254B     		ldr	r3, .L37+36
 529 02ca 1A68     		ldr	r2, [r3]
 530 02cc 3B49     		ldr	r1, .L37+128
 531 02ce 0968     		ldr	r1, [r1]
 532 02d0 8A18     		add	r2, r1, r2
 533 02d2 1278     		ldrb	r2, [r2]
 534 02d4 D2B2     		uxtb	r2, r2
 535 02d6 3A49     		ldr	r1, .L37+132
 536 02d8 0A60     		str	r2, [r1]
 795:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slRdBufIndexTmp++;
 537              		.loc 1 795 0
 538 02da 1A68     		ldr	r2, [r3]
 539 02dc 0132     		add	r2, r2, #1
 540 02de 1A60     		str	r2, [r3]
 541 02e0 0BE0     		b	.L32
 542              	.L33:
 796:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 797:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 798:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Probably Overflow */
 799:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 800:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_TX_FIFO_WR_REG = I2C_I2C_SLAVE_OVFL_RETURN;
 543              		.loc 1 800 0
 544 02e2 FF22     		mov	r2, #255
 545 02e4 364B     		ldr	r3, .L37+132
 546 02e6 1A60     		str	r2, [r3]
 801:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 802:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(0u == (I2C_INTR_TX_OVERFLOW & I2C_slOverFlowCount))
 547              		.loc 1 802 0
 548 02e8 1C4B     		ldr	r3, .L37+32
 549 02ea 1B78     		ldrb	r3, [r3]
 550 02ec 9B06     		lsl	r3, r3, #26
 551 02ee 04D4     		bmi	.L32
 803:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 804:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Get counter in range of byte: value 10 is overflow */
 805:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_slOverFlowCount++;
 552              		.loc 1 805 0
 553 02f0 1A4A     		ldr	r2, .L37+32
 554 02f2 1378     		ldrb	r3, [r2]
 555 02f4 0133     		add	r3, r3, #1
 556 02f6 DBB2     		uxtb	r3, r3
 557 02f8 1370     		strb	r3, [r2]
 558              	.L32:
 785:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 25


 559              		.loc 1 785 0
 560 02fa 174B     		ldr	r3, .L37+28
 561 02fc 1B68     		ldr	r3, [r3]
 562 02fe 1F22     		mov	r2, #31
 563 0300 1340     		and	r3, r2
 564 0302 082B     		cmp	r3, #8
 565 0304 DAD1     		bne	.L35
 806:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 807:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 808:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 809:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 810:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearTxInterruptSource(I2C_INTR_TX_EMPTY);
 566              		.loc 1 810 0
 567 0306 0F3A     		sub	r2, r2, #15
 568 0308 2E4B     		ldr	r3, .L37+136
 569 030a 1A60     		str	r2, [r3]
 570 030c 15E0     		b	.L1
 571              	.LVL23:
 572              	.L8:
 811:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 812:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 813:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         }  /* (I2C_I2C_SLAVE) */
 814:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 815:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 816:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 817:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 818:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* FSM EXIT:
 819:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Slave:  INTR_SLAVE_I2C_BUS_ERROR, INTR_SLAVE_I2C_ARB_LOST
 820:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Master: INTR_MASTER_I2C_BUS_ERROR, INTR_MASTER_I2C_ARB_LOST.
 821:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     */
 822:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     else
 823:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 824:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_CTRL_REG &= (uint32) ~I2C_CTRL_ENABLED; /* Disable scb IP */
 573              		.loc 1 824 0
 574 030e 2E4A     		ldr	r2, .L37+140
 575 0310 1368     		ldr	r3, [r2]
 576 0312 5B00     		lsl	r3, r3, #1
 577 0314 5B08     		lsr	r3, r3, #1
 578 0316 1360     		str	r3, [r2]
 825:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 826:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_state = I2C_I2C_FSM_IDLE;
 579              		.loc 1 826 0
 580 0318 1021     		mov	r1, #16
 581 031a 0B4B     		ldr	r3, .L37+12
 582 031c 1970     		strb	r1, [r3]
 827:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 828:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_DISABLE_SLAVE_AUTO_DATA;
 583              		.loc 1 828 0
 584 031e 154B     		ldr	r3, .L37+56
 585 0320 1868     		ldr	r0, [r3]
 586 0322 1949     		ldr	r1, .L37+76
 587 0324 0140     		and	r1, r0
 588 0326 1960     		str	r1, [r3]
 829:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_DISABLE_MASTER_AUTO_DATA;
 589              		.loc 1 829 0
 590 0328 1868     		ldr	r0, [r3]
 591 032a 2849     		ldr	r1, .L37+144
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 26


 592 032c 0140     		and	r1, r0
 593 032e 1960     		str	r1, [r3]
 830:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 831:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     #if(I2C_CY_SCBIP_V0)
 832:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 833:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 834:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 835:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         /* Clear interrupt sources as they are not automatically cleared after SCB is disabled */
 836:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_ClearTxInterruptSource(I2C_INTR_RX_ALL);
 837:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_ClearRxInterruptSource(I2C_INTR_TX_ALL);
 838:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_ALL);
 839:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_ALL);
 840:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     #endif /* (I2C_CY_SCBIP_V0) */
 841:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 842:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_CTRL_REG |= (uint32) I2C_CTRL_ENABLED;  /* Enable scb IP */
 594              		.loc 1 842 0
 595 0330 1368     		ldr	r3, [r2]
 596 0332 8021     		mov	r1, #128
 597 0334 0906     		lsl	r1, r1, #24
 598 0336 0B43     		orr	r3, r1
 599 0338 1360     		str	r3, [r2]
 600              	.LVL24:
 601              	.L1:
 843:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 844:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 845:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #ifdef I2C_I2C_ISR_EXIT_CALLBACK
 846:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     I2C_I2C_ISR_ExitCallback();
 847:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** #endif /* I2C_I2C_ISR_EXIT_CALLBACK */
 848:.\Generated_Source\PSoC4/I2C_I2C_INT.c ****     
 849:.\Generated_Source\PSoC4/I2C_I2C_INT.c **** }
 602              		.loc 1 849 0
 603              		@ sp needed
 604 033a 10BD     		pop	{r4, pc}
 605              	.L38:
 606              		.align	2
 607              	.L37:
 608 033c 00000000 		.word	I2C_customIntrHandler
 609 0340 8C0E2540 		.word	1076170380
 610 0344 880E2540 		.word	1076170376
 611 0348 00000000 		.word	I2C_state
 612 034c 4C0F2540 		.word	1076170572
 613 0350 00000000 		.word	I2C_slStatus
 614 0354 400F2540 		.word	1076170560
 615 0358 08022540 		.word	1076167176
 616 035c 00000000 		.word	I2C_slOverFlowCount
 617 0360 00000000 		.word	I2C_slRdBufIndexTmp
 618 0364 00000000 		.word	I2C_slRdBufIndex
 619 0368 880F2540 		.word	1076170632
 620 036c 04022540 		.word	1076167172
 621 0370 FFFFFEFF 		.word	-65537
 622 0374 60002540 		.word	1076166752
 623 0378 00000000 		.word	I2C_slWrBufIndex
 624 037c 00000000 		.word	I2C_slWrBufPtr
 625 0380 40032540 		.word	1076167488
 626 0384 08032540 		.word	1076167432
 627 0388 FF5FFFFF 		.word	-40961
 628 038c C00F2540 		.word	1076170688
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 27


 629 0390 C80F2540 		.word	1076170696
 630 0394 ED0F0000 		.word	4077
 631 0398 800E2540 		.word	1076170368
 632 039c 64002540 		.word	1076166756
 633 03a0 00000000 		.word	I2C_slWrBufSize
 634 03a4 FF0F0000 		.word	4095
 635 03a8 480F2540 		.word	1076170568
 636 03ac 6C002540 		.word	1076166764
 637 03b0 CC0F2540 		.word	1076170700
 638 03b4 8C0F2540 		.word	1076170636
 639 03b8 00000000 		.word	I2C_slRdBufSize
 640 03bc 00000000 		.word	I2C_slRdBufPtr
 641 03c0 40022540 		.word	1076167232
 642 03c4 800F2540 		.word	1076170624
 643 03c8 00002540 		.word	1076166656
 644 03cc FFFCFFFF 		.word	-769
 645              		.cfi_endproc
 646              	.LFE2:
 647              		.size	I2C_I2C_ISR, .-I2C_I2C_ISR
 648              		.text
 649              	.Letext0:
 650              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 651              		.file 3 ".\\Generated_Source\\PSoC4\\I2C_PVT.h"
 652              		.file 4 ".\\Generated_Source\\PSoC4\\I2C_I2C_PVT.h"
 653              		.section	.debug_info,"",%progbits
 654              	.Ldebug_info0:
 655 0000 76010000 		.4byte	0x176
 656 0004 0400     		.2byte	0x4
 657 0006 00000000 		.4byte	.Ldebug_abbrev0
 658 000a 04       		.byte	0x4
 659 000b 01       		.uleb128 0x1
 660 000c 9A010000 		.4byte	.LASF30
 661 0010 01       		.byte	0x1
 662 0011 62020000 		.4byte	.LASF31
 663 0015 3B000000 		.4byte	.LASF32
 664 0019 00000000 		.4byte	.Ldebug_ranges0+0
 665 001d 00000000 		.4byte	0
 666 0021 00000000 		.4byte	.Ldebug_line0
 667 0025 02       		.uleb128 0x2
 668 0026 01       		.byte	0x1
 669 0027 06       		.byte	0x6
 670 0028 56020000 		.4byte	.LASF0
 671 002c 02       		.uleb128 0x2
 672 002d 01       		.byte	0x1
 673 002e 08       		.byte	0x8
 674 002f A0000000 		.4byte	.LASF1
 675 0033 02       		.uleb128 0x2
 676 0034 02       		.byte	0x2
 677 0035 05       		.byte	0x5
 678 0036 28020000 		.4byte	.LASF2
 679 003a 02       		.uleb128 0x2
 680 003b 02       		.byte	0x2
 681 003c 07       		.byte	0x7
 682 003d 06000000 		.4byte	.LASF3
 683 0041 02       		.uleb128 0x2
 684 0042 04       		.byte	0x4
 685 0043 05       		.byte	0x5
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 28


 686 0044 4D020000 		.4byte	.LASF4
 687 0048 02       		.uleb128 0x2
 688 0049 04       		.byte	0x4
 689 004a 07       		.byte	0x7
 690 004b BD000000 		.4byte	.LASF5
 691 004f 02       		.uleb128 0x2
 692 0050 08       		.byte	0x8
 693 0051 05       		.byte	0x5
 694 0052 87010000 		.4byte	.LASF6
 695 0056 02       		.uleb128 0x2
 696 0057 08       		.byte	0x8
 697 0058 07       		.byte	0x7
 698 0059 3B010000 		.4byte	.LASF7
 699 005d 03       		.uleb128 0x3
 700 005e 04       		.byte	0x4
 701 005f 05       		.byte	0x5
 702 0060 696E7400 		.ascii	"int\000"
 703 0064 02       		.uleb128 0x2
 704 0065 04       		.byte	0x4
 705 0066 07       		.byte	0x7
 706 0067 2E010000 		.4byte	.LASF8
 707 006b 04       		.uleb128 0x4
 708 006c D9000000 		.4byte	.LASF9
 709 0070 02       		.byte	0x2
 710 0071 B3       		.byte	0xb3
 711 0072 2C000000 		.4byte	0x2c
 712 0076 04       		.uleb128 0x4
 713 0077 27010000 		.4byte	.LASF10
 714 007b 02       		.byte	0x2
 715 007c B5       		.byte	0xb5
 716 007d 48000000 		.4byte	0x48
 717 0081 02       		.uleb128 0x2
 718 0082 04       		.byte	0x4
 719 0083 04       		.byte	0x4
 720 0084 8D000000 		.4byte	.LASF11
 721 0088 02       		.uleb128 0x2
 722 0089 08       		.byte	0x8
 723 008a 04       		.byte	0x4
 724 008b 0F010000 		.4byte	.LASF12
 725 008f 02       		.uleb128 0x2
 726 0090 01       		.byte	0x1
 727 0091 08       		.byte	0x8
 728 0092 95010000 		.4byte	.LASF13
 729 0096 05       		.uleb128 0x5
 730 0097 6B000000 		.4byte	0x6b
 731 009b 06       		.uleb128 0x6
 732 009c 00000000 		.4byte	.LASF14
 733 00a0 02       		.byte	0x2
 734 00a1 5F01     		.2byte	0x15f
 735 00a3 A7000000 		.4byte	0xa7
 736 00a7 05       		.uleb128 0x5
 737 00a8 76000000 		.4byte	0x76
 738 00ac 06       		.uleb128 0x6
 739 00ad 52010000 		.4byte	.LASF15
 740 00b1 02       		.byte	0x2
 741 00b2 6F01     		.2byte	0x16f
 742 00b4 B8000000 		.4byte	0xb8
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 29


 743 00b8 07       		.uleb128 0x7
 744 00b9 04       		.byte	0x4
 745 00ba BE000000 		.4byte	0xbe
 746 00be 08       		.uleb128 0x8
 747 00bf 02       		.uleb128 0x2
 748 00c0 04       		.byte	0x4
 749 00c1 07       		.byte	0x7
 750 00c2 7E010000 		.4byte	.LASF16
 751 00c6 09       		.uleb128 0x9
 752 00c7 03010000 		.4byte	.LASF33
 753 00cb 01       		.byte	0x1
 754 00cc 25       		.byte	0x25
 755 00cd 00000000 		.4byte	.LFB2
 756 00d1 D0030000 		.4byte	.LFE2-.LFB2
 757 00d5 01       		.uleb128 0x1
 758 00d6 9C       		.byte	0x9c
 759 00d7 FA000000 		.4byte	0xfa
 760 00db 0A       		.uleb128 0xa
 761 00dc CF000000 		.4byte	.LASF17
 762 00e0 01       		.byte	0x1
 763 00e1 27       		.byte	0x27
 764 00e2 76000000 		.4byte	0x76
 765 00e6 00000000 		.4byte	.LLST0
 766 00ea 0A       		.uleb128 0xa
 767 00eb 19000000 		.4byte	.LASF18
 768 00ef 01       		.byte	0x1
 769 00f0 28       		.byte	0x28
 770 00f1 76000000 		.4byte	0x76
 771 00f5 6B000000 		.4byte	.LLST1
 772 00f9 00       		.byte	0
 773 00fa 0B       		.uleb128 0xb
 774 00fb 25000000 		.4byte	.LASF19
 775 00ff 03       		.byte	0x3
 776 0100 3A       		.byte	0x3a
 777 0101 AC000000 		.4byte	0xac
 778 0105 0B       		.uleb128 0xb
 779 0106 43020000 		.4byte	.LASF20
 780 010a 04       		.byte	0x4
 781 010b 1D       		.byte	0x1d
 782 010c 96000000 		.4byte	0x96
 783 0110 0B       		.uleb128 0xb
 784 0111 93000000 		.4byte	.LASF21
 785 0115 04       		.byte	0x4
 786 0116 20       		.byte	0x20
 787 0117 96000000 		.4byte	0x96
 788 011b 0B       		.uleb128 0xb
 789 011c 6F010000 		.4byte	.LASF22
 790 0120 04       		.byte	0x4
 791 0121 23       		.byte	0x23
 792 0122 26010000 		.4byte	0x126
 793 0126 07       		.uleb128 0x7
 794 0127 04       		.byte	0x4
 795 0128 96000000 		.4byte	0x96
 796 012c 0B       		.uleb128 0xb
 797 012d 5F010000 		.4byte	.LASF23
 798 0131 04       		.byte	0x4
 799 0132 24       		.byte	0x24
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 30


 800 0133 A7000000 		.4byte	0xa7
 801 0137 0B       		.uleb128 0xb
 802 0138 16010000 		.4byte	.LASF24
 803 013c 04       		.byte	0x4
 804 013d 25       		.byte	0x25
 805 013e A7000000 		.4byte	0xa7
 806 0142 0B       		.uleb128 0xb
 807 0143 AE000000 		.4byte	.LASF25
 808 0147 04       		.byte	0x4
 809 0148 28       		.byte	0x28
 810 0149 26010000 		.4byte	0x126
 811 014d 0B       		.uleb128 0xb
 812 014e DF000000 		.4byte	.LASF26
 813 0152 04       		.byte	0x4
 814 0153 29       		.byte	0x29
 815 0154 A7000000 		.4byte	0xa7
 816 0158 0B       		.uleb128 0xb
 817 0159 32020000 		.4byte	.LASF27
 818 015d 04       		.byte	0x4
 819 015e 2A       		.byte	0x2a
 820 015f A7000000 		.4byte	0xa7
 821 0163 0B       		.uleb128 0xb
 822 0164 89020000 		.4byte	.LASF28
 823 0168 04       		.byte	0x4
 824 0169 2B       		.byte	0x2b
 825 016a A7000000 		.4byte	0xa7
 826 016e 0B       		.uleb128 0xb
 827 016f EF000000 		.4byte	.LASF29
 828 0173 04       		.byte	0x4
 829 0174 2C       		.byte	0x2c
 830 0175 96000000 		.4byte	0x96
 831 0179 00       		.byte	0
 832              		.section	.debug_abbrev,"",%progbits
 833              	.Ldebug_abbrev0:
 834 0000 01       		.uleb128 0x1
 835 0001 11       		.uleb128 0x11
 836 0002 01       		.byte	0x1
 837 0003 25       		.uleb128 0x25
 838 0004 0E       		.uleb128 0xe
 839 0005 13       		.uleb128 0x13
 840 0006 0B       		.uleb128 0xb
 841 0007 03       		.uleb128 0x3
 842 0008 0E       		.uleb128 0xe
 843 0009 1B       		.uleb128 0x1b
 844 000a 0E       		.uleb128 0xe
 845 000b 55       		.uleb128 0x55
 846 000c 17       		.uleb128 0x17
 847 000d 11       		.uleb128 0x11
 848 000e 01       		.uleb128 0x1
 849 000f 10       		.uleb128 0x10
 850 0010 17       		.uleb128 0x17
 851 0011 00       		.byte	0
 852 0012 00       		.byte	0
 853 0013 02       		.uleb128 0x2
 854 0014 24       		.uleb128 0x24
 855 0015 00       		.byte	0
 856 0016 0B       		.uleb128 0xb
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 31


 857 0017 0B       		.uleb128 0xb
 858 0018 3E       		.uleb128 0x3e
 859 0019 0B       		.uleb128 0xb
 860 001a 03       		.uleb128 0x3
 861 001b 0E       		.uleb128 0xe
 862 001c 00       		.byte	0
 863 001d 00       		.byte	0
 864 001e 03       		.uleb128 0x3
 865 001f 24       		.uleb128 0x24
 866 0020 00       		.byte	0
 867 0021 0B       		.uleb128 0xb
 868 0022 0B       		.uleb128 0xb
 869 0023 3E       		.uleb128 0x3e
 870 0024 0B       		.uleb128 0xb
 871 0025 03       		.uleb128 0x3
 872 0026 08       		.uleb128 0x8
 873 0027 00       		.byte	0
 874 0028 00       		.byte	0
 875 0029 04       		.uleb128 0x4
 876 002a 16       		.uleb128 0x16
 877 002b 00       		.byte	0
 878 002c 03       		.uleb128 0x3
 879 002d 0E       		.uleb128 0xe
 880 002e 3A       		.uleb128 0x3a
 881 002f 0B       		.uleb128 0xb
 882 0030 3B       		.uleb128 0x3b
 883 0031 0B       		.uleb128 0xb
 884 0032 49       		.uleb128 0x49
 885 0033 13       		.uleb128 0x13
 886 0034 00       		.byte	0
 887 0035 00       		.byte	0
 888 0036 05       		.uleb128 0x5
 889 0037 35       		.uleb128 0x35
 890 0038 00       		.byte	0
 891 0039 49       		.uleb128 0x49
 892 003a 13       		.uleb128 0x13
 893 003b 00       		.byte	0
 894 003c 00       		.byte	0
 895 003d 06       		.uleb128 0x6
 896 003e 16       		.uleb128 0x16
 897 003f 00       		.byte	0
 898 0040 03       		.uleb128 0x3
 899 0041 0E       		.uleb128 0xe
 900 0042 3A       		.uleb128 0x3a
 901 0043 0B       		.uleb128 0xb
 902 0044 3B       		.uleb128 0x3b
 903 0045 05       		.uleb128 0x5
 904 0046 49       		.uleb128 0x49
 905 0047 13       		.uleb128 0x13
 906 0048 00       		.byte	0
 907 0049 00       		.byte	0
 908 004a 07       		.uleb128 0x7
 909 004b 0F       		.uleb128 0xf
 910 004c 00       		.byte	0
 911 004d 0B       		.uleb128 0xb
 912 004e 0B       		.uleb128 0xb
 913 004f 49       		.uleb128 0x49
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 32


 914 0050 13       		.uleb128 0x13
 915 0051 00       		.byte	0
 916 0052 00       		.byte	0
 917 0053 08       		.uleb128 0x8
 918 0054 15       		.uleb128 0x15
 919 0055 00       		.byte	0
 920 0056 27       		.uleb128 0x27
 921 0057 19       		.uleb128 0x19
 922 0058 00       		.byte	0
 923 0059 00       		.byte	0
 924 005a 09       		.uleb128 0x9
 925 005b 2E       		.uleb128 0x2e
 926 005c 01       		.byte	0x1
 927 005d 3F       		.uleb128 0x3f
 928 005e 19       		.uleb128 0x19
 929 005f 03       		.uleb128 0x3
 930 0060 0E       		.uleb128 0xe
 931 0061 3A       		.uleb128 0x3a
 932 0062 0B       		.uleb128 0xb
 933 0063 3B       		.uleb128 0x3b
 934 0064 0B       		.uleb128 0xb
 935 0065 27       		.uleb128 0x27
 936 0066 19       		.uleb128 0x19
 937 0067 11       		.uleb128 0x11
 938 0068 01       		.uleb128 0x1
 939 0069 12       		.uleb128 0x12
 940 006a 06       		.uleb128 0x6
 941 006b 40       		.uleb128 0x40
 942 006c 18       		.uleb128 0x18
 943 006d 9642     		.uleb128 0x2116
 944 006f 19       		.uleb128 0x19
 945 0070 01       		.uleb128 0x1
 946 0071 13       		.uleb128 0x13
 947 0072 00       		.byte	0
 948 0073 00       		.byte	0
 949 0074 0A       		.uleb128 0xa
 950 0075 34       		.uleb128 0x34
 951 0076 00       		.byte	0
 952 0077 03       		.uleb128 0x3
 953 0078 0E       		.uleb128 0xe
 954 0079 3A       		.uleb128 0x3a
 955 007a 0B       		.uleb128 0xb
 956 007b 3B       		.uleb128 0x3b
 957 007c 0B       		.uleb128 0xb
 958 007d 49       		.uleb128 0x49
 959 007e 13       		.uleb128 0x13
 960 007f 02       		.uleb128 0x2
 961 0080 17       		.uleb128 0x17
 962 0081 00       		.byte	0
 963 0082 00       		.byte	0
 964 0083 0B       		.uleb128 0xb
 965 0084 34       		.uleb128 0x34
 966 0085 00       		.byte	0
 967 0086 03       		.uleb128 0x3
 968 0087 0E       		.uleb128 0xe
 969 0088 3A       		.uleb128 0x3a
 970 0089 0B       		.uleb128 0xb
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 33


 971 008a 3B       		.uleb128 0x3b
 972 008b 0B       		.uleb128 0xb
 973 008c 49       		.uleb128 0x49
 974 008d 13       		.uleb128 0x13
 975 008e 3F       		.uleb128 0x3f
 976 008f 19       		.uleb128 0x19
 977 0090 3C       		.uleb128 0x3c
 978 0091 19       		.uleb128 0x19
 979 0092 00       		.byte	0
 980 0093 00       		.byte	0
 981 0094 00       		.byte	0
 982              		.section	.debug_loc,"",%progbits
 983              	.Ldebug_loc0:
 984              	.LLST0:
 985 0000 9A000000 		.4byte	.LVL2
 986 0004 AA000000 		.4byte	.LVL3
 987 0008 0100     		.2byte	0x1
 988 000a 53       		.byte	0x53
 989 000b B0000000 		.4byte	.LVL4
 990 000f B6000000 		.4byte	.LVL5
 991 0013 0100     		.2byte	0x1
 992 0015 53       		.byte	0x53
 993 0016 B4010000 		.4byte	.LVL6
 994 001a BC010000 		.4byte	.LVL7
 995 001e 0100     		.2byte	0x1
 996 0020 53       		.byte	0x53
 997 0021 C0010000 		.4byte	.LVL8
 998 0025 C8010000 		.4byte	.LVL9
 999 0029 0100     		.2byte	0x1
 1000 002b 53       		.byte	0x53
 1001 002c D2010000 		.4byte	.LVL10
 1002 0030 D6010000 		.4byte	.LVL11
 1003 0034 0100     		.2byte	0x1
 1004 0036 53       		.byte	0x53
 1005 0037 1E020000 		.4byte	.LVL12
 1006 003b 26020000 		.4byte	.LVL13
 1007 003f 0100     		.2byte	0x1
 1008 0041 50       		.byte	0x50
 1009 0042 28020000 		.4byte	.LVL14
 1010 0046 68020000 		.4byte	.LVL17
 1011 004a 0100     		.2byte	0x1
 1012 004c 50       		.byte	0x50
 1013 004d 74020000 		.4byte	.LVL18
 1014 0051 92020000 		.4byte	.LVL19
 1015 0055 0100     		.2byte	0x1
 1016 0057 53       		.byte	0x53
 1017 0058 9C020000 		.4byte	.LVL20
 1018 005c A0020000 		.4byte	.LVL21
 1019 0060 0100     		.2byte	0x1
 1020 0062 53       		.byte	0x53
 1021 0063 00000000 		.4byte	0
 1022 0067 00000000 		.4byte	0
 1023              	.LLST1:
 1024 006b 02000000 		.4byte	.LVL0
 1025 006f 2C020000 		.4byte	.LVL15
 1026 0073 0200     		.2byte	0x2
 1027 0075 30       		.byte	0x30
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 34


 1028 0076 9F       		.byte	0x9f
 1029 0077 2C020000 		.4byte	.LVL15
 1030 007b 68020000 		.4byte	.LVL17
 1031 007f 0100     		.2byte	0x1
 1032 0081 54       		.byte	0x54
 1033 0082 68020000 		.4byte	.LVL17
 1034 0086 B2020000 		.4byte	.LVL22
 1035 008a 0200     		.2byte	0x2
 1036 008c 30       		.byte	0x30
 1037 008d 9F       		.byte	0x9f
 1038 008e 0E030000 		.4byte	.LVL23
 1039 0092 3A030000 		.4byte	.LVL24
 1040 0096 0200     		.2byte	0x2
 1041 0098 30       		.byte	0x30
 1042 0099 9F       		.byte	0x9f
 1043 009a 00000000 		.4byte	0
 1044 009e 00000000 		.4byte	0
 1045              		.section	.debug_aranges,"",%progbits
 1046 0000 1C000000 		.4byte	0x1c
 1047 0004 0200     		.2byte	0x2
 1048 0006 00000000 		.4byte	.Ldebug_info0
 1049 000a 04       		.byte	0x4
 1050 000b 00       		.byte	0
 1051 000c 0000     		.2byte	0
 1052 000e 0000     		.2byte	0
 1053 0010 00000000 		.4byte	.LFB2
 1054 0014 D0030000 		.4byte	.LFE2-.LFB2
 1055 0018 00000000 		.4byte	0
 1056 001c 00000000 		.4byte	0
 1057              		.section	.debug_ranges,"",%progbits
 1058              	.Ldebug_ranges0:
 1059 0000 00000000 		.4byte	.LFB2
 1060 0004 D0030000 		.4byte	.LFE2
 1061 0008 00000000 		.4byte	0
 1062 000c 00000000 		.4byte	0
 1063              		.section	.debug_line,"",%progbits
 1064              	.Ldebug_line0:
 1065 0000 37010000 		.section	.debug_str,"MS",%progbits,1
 1065      02007F00 
 1065      00000201 
 1065      FB0E0D00 
 1065      01010101 
 1066              	.LASF14:
 1067 0000 72656733 		.ascii	"reg32\000"
 1067      3200
 1068              	.LASF3:
 1069 0006 73686F72 		.ascii	"short unsigned int\000"
 1069      7420756E 
 1069      7369676E 
 1069      65642069 
 1069      6E7400
 1070              	.LASF18:
 1071 0019 656E6454 		.ascii	"endTransfer\000"
 1071      72616E73 
 1071      66657200 
 1072              	.LASF19:
 1073 0025 4932435F 		.ascii	"I2C_customIntrHandler\000"
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 35


 1073      63757374 
 1073      6F6D496E 
 1073      74724861 
 1073      6E646C65 
 1074              	.LASF32:
 1075 003b 413A5C44 		.ascii	"A:\\Documents\\School\\ECEG-721_Embedded_Systems\\L"
 1075      6F63756D 
 1075      656E7473 
 1075      5C536368 
 1075      6F6F6C5C 
 1076 006a 6162735C 		.ascii	"abs\\Lab7\\BLE Lab 1\\BLE Lab 1.cydsn\000"
 1076      4C616237 
 1076      5C424C45 
 1076      204C6162 
 1076      20315C42 
 1077              	.LASF11:
 1078 008d 666C6F61 		.ascii	"float\000"
 1078      7400
 1079              	.LASF21:
 1080 0093 4932435F 		.ascii	"I2C_slStatus\000"
 1080      736C5374 
 1080      61747573 
 1080      00
 1081              	.LASF1:
 1082 00a0 756E7369 		.ascii	"unsigned char\000"
 1082      676E6564 
 1082      20636861 
 1082      7200
 1083              	.LASF25:
 1084 00ae 4932435F 		.ascii	"I2C_slRdBufPtr\000"
 1084      736C5264 
 1084      42756650 
 1084      747200
 1085              	.LASF5:
 1086 00bd 6C6F6E67 		.ascii	"long unsigned int\000"
 1086      20756E73 
 1086      69676E65 
 1086      6420696E 
 1086      7400
 1087              	.LASF17:
 1088 00cf 64696666 		.ascii	"diffCount\000"
 1088      436F756E 
 1088      7400
 1089              	.LASF9:
 1090 00d9 75696E74 		.ascii	"uint8\000"
 1090      3800
 1091              	.LASF26:
 1092 00df 4932435F 		.ascii	"I2C_slRdBufSize\000"
 1092      736C5264 
 1092      42756653 
 1092      697A6500 
 1093              	.LASF29:
 1094 00ef 4932435F 		.ascii	"I2C_slOverFlowCount\000"
 1094      736C4F76 
 1094      6572466C 
 1094      6F77436F 
 1094      756E7400 
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 36


 1095              	.LASF33:
 1096 0103 4932435F 		.ascii	"I2C_I2C_ISR\000"
 1096      4932435F 
 1096      49535200 
 1097              	.LASF12:
 1098 010f 646F7562 		.ascii	"double\000"
 1098      6C6500
 1099              	.LASF24:
 1100 0116 4932435F 		.ascii	"I2C_slWrBufIndex\000"
 1100      736C5772 
 1100      42756649 
 1100      6E646578 
 1100      00
 1101              	.LASF10:
 1102 0127 75696E74 		.ascii	"uint32\000"
 1102      333200
 1103              	.LASF8:
 1104 012e 756E7369 		.ascii	"unsigned int\000"
 1104      676E6564 
 1104      20696E74 
 1104      00
 1105              	.LASF7:
 1106 013b 6C6F6E67 		.ascii	"long long unsigned int\000"
 1106      206C6F6E 
 1106      6720756E 
 1106      7369676E 
 1106      65642069 
 1107              	.LASF15:
 1108 0152 63796973 		.ascii	"cyisraddress\000"
 1108      72616464 
 1108      72657373 
 1108      00
 1109              	.LASF23:
 1110 015f 4932435F 		.ascii	"I2C_slWrBufSize\000"
 1110      736C5772 
 1110      42756653 
 1110      697A6500 
 1111              	.LASF22:
 1112 016f 4932435F 		.ascii	"I2C_slWrBufPtr\000"
 1112      736C5772 
 1112      42756650 
 1112      747200
 1113              	.LASF16:
 1114 017e 73697A65 		.ascii	"sizetype\000"
 1114      74797065 
 1114      00
 1115              	.LASF6:
 1116 0187 6C6F6E67 		.ascii	"long long int\000"
 1116      206C6F6E 
 1116      6720696E 
 1116      7400
 1117              	.LASF13:
 1118 0195 63686172 		.ascii	"char\000"
 1118      00
 1119              	.LASF30:
 1120 019a 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1120      4320342E 
ARM GAS  C:\Users\Luci\AppData\Local\Temp\cckjbMm3.s 			page 37


 1120      392E3320 
 1120      32303135 
 1120      30333033 
 1121 01cd 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 1121      20726576 
 1121      6973696F 
 1121      6E203232 
 1121      31323230 
 1122 0200 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1122      66756E63 
 1122      74696F6E 
 1122      2D736563 
 1122      74696F6E 
 1123              	.LASF2:
 1124 0228 73686F72 		.ascii	"short int\000"
 1124      7420696E 
 1124      7400
 1125              	.LASF27:
 1126 0232 4932435F 		.ascii	"I2C_slRdBufIndex\000"
 1126      736C5264 
 1126      42756649 
 1126      6E646578 
 1126      00
 1127              	.LASF20:
 1128 0243 4932435F 		.ascii	"I2C_state\000"
 1128      73746174 
 1128      6500
 1129              	.LASF4:
 1130 024d 6C6F6E67 		.ascii	"long int\000"
 1130      20696E74 
 1130      00
 1131              	.LASF0:
 1132 0256 7369676E 		.ascii	"signed char\000"
 1132      65642063 
 1132      68617200 
 1133              	.LASF31:
 1134 0262 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\I2C_I2C_INT.c\000"
 1134      6E657261 
 1134      7465645F 
 1134      536F7572 
 1134      63655C50 
 1135              	.LASF28:
 1136 0289 4932435F 		.ascii	"I2C_slRdBufIndexTmp\000"
 1136      736C5264 
 1136      42756649 
 1136      6E646578 
 1136      546D7000 
 1137              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
